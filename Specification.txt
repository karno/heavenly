?* Heavenly specification sheet

プログラミング用仕様書

■一般的に使われる型要素として、以下を定義する:
struct WinHand : 和了型
	内部に面子のコレクションと当たり牌を持つ。
class Tile : 牌データ
	内部にint型のIDを持つ。すべての牌はIDを割り振られて管理される。
	また、個々の牌の識別用にグローバルIDを持つが、外見上は牌IDさえ一致すれば
	同一のものとしてかまわない。
	赤ドラ等の特殊牌はGameSystemからAttributeを取得すること。
struct Attribute : 牌の添付情報
	GameSystemが管理する。
	個々の牌(GIDで識別)に結び付けられ、その牌に関する特殊状態を設定できる。
	(赤ドラ以外思いつかない…)

■共通処理を実現する静的メソッドクラスとして、以下を定義する:
TileSystem : 牌の共通処理
	和了型判定、鳴きの判定など。
TileEvaluator : 和了型の判定処理
	Evaluatorのコレクションを保持し、特定の和了型に対する翻数、符数、
	得点を計算する。
TileFactory : 牌の生成処理
	すべての牌はTile* として表されるが、実態はFileFactoryが管理する。
	::Create() で牌のインスタンスを得て、::Delete(Tile)で破棄する。
	すべてのインスタンスは、::Destroy() で間違いなく破棄される。
	(簡易GC。)
System : コモン メソッド
	（テンプレート）クラス、メソッド等が含まれる。
	特定のオペレーションを容易にするために使用。

■核となる処理システムについて、以下を定義する:
GameSystem : 対局処理
	TileFactoryからの牌生成、ゲーム管理を行う。
	牌にはAttributeが添付されるが、その管理はこのゲームシステムが行う。

■一般的な基底仮想クラスとして、以下を定義する:
Criteria : 和了型判定
	継承されて使用される。
	WinHandを引数にとり、それが特定の型を満たしているか、また
	それ自身の翻数を定義する。
Player : ゲーム実行I/F
	ゲーム実行に必要なメソッド、メンバ変数、および
	仮想メソッドを定義する。
	適切にオーバーライドし、ゲーム実行I/Fを作る。


■一般的な注意事項
	○Tileクラスはfactoryが管理するため、一般的にポインタの授受となるが、
		null参照でないかよく確認すること。
		(普通に渡されていればnull参照となることはない、はず
	○EUCjpを用いること。


■備考
	○TileFactoryを介さずにParseString等でインスタンスを得た場合、
		忘れずに破棄すること。
	○ポインタ参照への変換はがんばってください。
